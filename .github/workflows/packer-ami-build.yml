name: Packer Build

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build-ami:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: Packer AMI Build

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: npm test

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Environment Variables for Tests
        run: |
          echo "DB_USER=\"${{ secrets.DB_USER }}\"" >> .env
          echo "DB_AMI_PASSWORD=\"${{ secrets.DB_AMI_PASSWORD }}\"" >> .env
          echo "DB_HOST=\"${{ secrets.DB_HOST }}\"" >> .env
          echo "ENV=\"test\"" >> .env
          echo "DB_NAME=\"${{ secrets.DB_NAME }}\"" >> .env

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: "1.12.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws-region: "${{ secrets.AWS_REGION }}"

      - name: Run packer init
        # working-directory: ./packer
        id: init
        run: packer init packer/

      - name: Build AWS AMI
        run: |
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "instance_type=t2.micro" \
            -var "ami_users=[\"${{ secrets.AMI_USERS }}\"]" \
            packer/

      - name: Get latest AMI ID
        id: get_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=state,Values=available" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' \
            --output text)

          echo "Latest AMI: $AMI_ID"
          if [ -z "$AMI_ID" ]; then
            echo "No AMI found. Failing the job."
            exit 1
          fi
          echo "ami_id=$AMI_ID" >> "$GITHUB_OUTPUT"

      - name: Switch to DEMO AWS Account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-east-1

      - name: Log AMI ID for Verification
        run: |
          echo "Creating new launch template version with AMI ID: ${{ steps.get_ami.outputs.ami_id }}"

      - name: Create Launch Template Version with Latest AMI
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"${{ steps.get_ami.outputs.ami_id }}\"}"

      - name: Start Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP }} \
            --strategy Rolling

      - name: Wait for Refresh to Complete
        run: |
          for i in {1..60}; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP }} \
              --query 'InstanceRefreshes[0].Status' --output text)
            echo "Refresh Status: $STATUS"
            if [ "$STATUS" == "Successful" ]; then
              echo "Refresh completed"
              exit 0
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
              echo "Refresh failed"
              exit 1
            fi
            sleep 20
          done
          echo "Refresh timeout"
          exit 1
